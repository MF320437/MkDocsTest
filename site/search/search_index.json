{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EventManager System Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The EventManager system is a modular approach to managing events in a Roblox game. It consists of the following modules:</p> <ol> <li>EventManager (Main Module): The main module that delegates tasks to the child modules.</li> <li>ClientEventManager (Child Module): Handles client-specific events.</li> <li>ServerEventManager (Child Module): Handles server-specific events.</li> <li>Utilities (Optional Child Module): Provides common utility functions.</li> </ol> <p>This documentation will guide you through the usage and implementation details of each module.</p>"},{"location":"#module-documentation","title":"Module Documentation","text":"<ol> <li>EventManager (Main Module)</li> <li>ClientEventManager (Child Module)</li> <li>ServerEventManager (Child Module) - documentation unfinished</li> <li>Utilities (Optional Child Module) - documentation unfinished</li> </ol>"},{"location":"#usage-examples","title":"Usage Examples","text":"<p>Here are some examples of how to use the EventManager system:</p>"},{"location":"#client-script","title":"Client Script","text":"<pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nlocal function onClientHit()\n    print(\"Client hit event received\")\nend\n\nEventManager.Client.RegisterClientEvent(\"OnClientHit\", onClientHit)\n\n-- Unregister the client event\n-- EventManager.Client.UnregisterClientEvent(\"OnClientHit\", onClientHit)\n</code></pre>"},{"location":"#server-script","title":"Server Script","text":"<pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nlocal function onAbilityUsed(player, ability)\n    print(player.Name .. \" used ability: \" .. ability)\nend\n\nEventManager.Server.RegisterServerEvent(\"OnAbilityUsed\", onAbilityUsed)\n\n-- Handle client-to-server event\nEventManager.Server.HandleClientToServerEvent(\"OnAbilityUsed\", onAbilityUsed)\n\n-- Unregister the server event\n-- EventManager.Server.UnregisterServerEvent(\"OnAbilityUsed\", onAbilityUsed)\n</code></pre>"},{"location":"clienteventmanager/","title":"ClientEventManager (Child Module)","text":"<p>The <code>ClientEventManager</code> module is responsible for handling client-specific events in a Roblox game. It provides a set of functions to register, fire, and unregister client events, ensuring a consistent and organized way of managing event-driven interactions on the client-side.</p>"},{"location":"clienteventmanager/#module-structure","title":"Module Structure","text":"<p>The <code>ClientEventManager</code> module has the following structure:</p> <pre><code>-- ClientEventManager Module\nlocal ClientEventManager = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal clientEvents = {}\n\nlocal function getOrCreateEvent(eventTable, eventName)\n    -- Implementation to get or create a RemoteEvent in ReplicatedStorage\nend\n\nfunction ClientEventManager.RegisterClientEvent(eventName, callback, priority)\n    -- Implementation to register a client event\nend\n\nfunction ClientEventManager.FireClientEvent(eventName, ...)\n    -- Implementation to fire a client event\nend\n\nfunction ClientEventManager.UnregisterClientEvent(eventName, callback)\n    -- Implementation to unregister a client event\nend\n\nreturn ClientEventManager\n</code></pre>"},{"location":"clienteventmanager/#functions","title":"Functions","text":""},{"location":"clienteventmanager/#getorcreateeventeventtable-eventname","title":"<code>getOrCreateEvent(eventTable, eventName)</code>","text":"<p>This function is responsible for getting or creating a <code>RemoteEvent</code> in the <code>ReplicatedStorage</code> service for a given event name.</p> <p>Parameters: - <code>eventTable</code>: A table that stores the registered client events. - <code>eventName</code>: The name of the event.</p> <p>Returns: - A table containing the <code>RemoteEvent</code> and a table of registered callbacks for the event.</p>"},{"location":"clienteventmanager/#clienteventmanagerregisterclienteventeventname-callback-priority","title":"<code>ClientEventManager.RegisterClientEvent(eventName, callback, priority)</code>","text":"<p>This function allows you to register a client event with a callback function and an optional priority.</p> <p>Parameters: - <code>eventName</code>: The name of the event. - <code>callback</code>: The function to be called when the event is fired. - <code>priority</code>: (Optional) The priority of the callback function. Higher priority callbacks will be executed first.</p> <p>Usage Example: <pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nlocal function onClientHit()\n    print(\"Client hit event received\")\nend\n\nEventManager.Client.RegisterClientEvent(\"OnClientHit\", onClientHit)\n</code></pre></p>"},{"location":"clienteventmanager/#clienteventmanagerfireclienteventeventname","title":"<code>ClientEventManager.FireClientEvent(eventName, ...)</code>","text":"<p>This function allows you to fire a client event with optional arguments.</p> <p>Parameters: - <code>eventName</code>: The name of the event to be fired. - <code>...</code>: (Optional) Any arguments to be passed to the registered callbacks.</p> <p>Usage Example: <pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nEventManager.Client.FireClientEvent(\"OnClientHit\")\n</code></pre></p>"},{"location":"clienteventmanager/#clienteventmanagerunregisterclienteventeventname-callback","title":"<code>ClientEventManager.UnregisterClientEvent(eventName, callback)</code>","text":"<p>This function allows you to unregister a client event callback.</p> <p>Parameters: - <code>eventName</code>: The name of the event. - <code>callback</code>: The function to be unregistered.</p> <p>Usage Example: <pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nlocal function onClientHit()\n    print(\"Client hit event received\")\nend\n\nEventManager.Client.RegisterClientEvent(\"OnClientHit\", onClientHit)\n-- Later, when you want to unregister the event\nEventManager.Client.UnregisterClientEvent(\"OnClientHit\", onClientHit)\n</code></pre></p>"},{"location":"clienteventmanager/#integrating-with-utilities-module","title":"Integrating with Utilities Module","text":"<p>The <code>ClientEventManager</code> module can be integrated with an optional <code>Utilities</code> module, which provides a <code>SortByPriority</code> function to sort the registered callbacks by their priority.</p> <pre><code>-- ClientEventManager Module (with Utilities)\nlocal ClientEventManager = {}\nlocal Utilities = require(script.Parent.Utilities)\n\nfunction ClientEventManager.RegisterClientEvent(eventName, callback, priority)\n    local eventEntry = getOrCreateEvent(clientEvents, eventName)\n    table.insert(eventEntry.callbacks, {callback = callback, priority = priority or 0})\n    Utilities.SortByPriority(eventEntry.callbacks)\n    eventEntry.event.OnClientEvent:Connect(function(...)\n        for _, cb in ipairs(eventEntry.callbacks) do\n            cb.callback(...)\n        end\n    end)\nend\n\nreturn ClientEventManager\n</code></pre> <p>In this updated version, the <code>RegisterClientEvent</code> function uses the <code>Utilities.SortByPriority</code> function to sort the registered callbacks by their priority, ensuring that higher priority callbacks are executed first.</p>"},{"location":"clienteventmanager/#conclusion","title":"Conclusion","text":"<p>The <code>ClientEventManager</code> module provides a robust and flexible way to manage client-specific events in a Roblox game. By using this module, you can easily register, fire, and unregister events, ensuring a consistent and organized event-driven architecture on the client-side.</p>"},{"location":"eventmanager/","title":"EventManager (Main Module)","text":"<p>The <code>EventManager</code> is the main module that serves as the entry point for managing events in a Roblox game. It acts as a central hub, delegating tasks to its child modules: <code>ClientEventManager</code> and <code>ServerEventManager</code>. The <code>EventManager</code> also provides an optional <code>Utilities</code> module for common utility functions.</p>"},{"location":"eventmanager/#modules","title":"Modules","text":""},{"location":"eventmanager/#eventmanager-main-module_1","title":"<code>EventManager</code> (Main Module)","text":"<p>The <code>EventManager</code> module is responsible for requiring and delegating tasks to the child modules.</p> <pre><code>-- EventManager Module\nlocal EventManager = {}\n\nlocal ClientEventManager = require(script.ClientEventManager)\nlocal ServerEventManager = require(script.ServerEventManager)\n\nEventManager.Client = ClientEventManager\nEventManager.Server = ServerEventManager\n\nreturn EventManager\n</code></pre>"},{"location":"eventmanager/#clienteventmanager-child-module","title":"<code>ClientEventManager</code> (Child Module)","text":"<p>The <code>ClientEventManager</code> module handles client-specific events. It provides functions to register, fire, and unregister client events.</p> <pre><code>-- ClientEventManager Module\nlocal ClientEventManager = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal clientEvents = {}\n\nlocal function getOrCreateEvent(eventTable, eventName)\n    -- Code to get or create a RemoteEvent in ReplicatedStorage\nend\n\nfunction ClientEventManager.RegisterClientEvent(eventName, callback, priority)\n    -- Code to register a client event with the specified callback and priority\nend\n\nfunction ClientEventManager.FireClientEvent(eventName, ...)\n    -- Code to fire a client event\nend\n\nfunction ClientEventManager.UnregisterClientEvent(eventName, callback)\n    -- Code to unregister a client event\nend\n\nreturn ClientEventManager\n</code></pre>"},{"location":"eventmanager/#servereventmanager-child-module","title":"<code>ServerEventManager</code> (Child Module)","text":"<p>The <code>ServerEventManager</code> module handles server-specific events. It provides functions to register, fire, and unregister server events, as well as a function to handle client-to-server events.</p> <pre><code>-- ServerEventManager Module\nlocal ServerEventManager = {}\n\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal serverEvents = {}\n\nlocal function getOrCreateEvent(eventTable, eventName)\n    -- Code to get or create a BindableEvent in ReplicatedStorage\nend\n\nfunction ServerEventManager.RegisterServerEvent(eventName, callback, priority)\n    -- Code to register a server event with the specified callback and priority\nend\n\nfunction ServerEventManager.FireServerEvent(eventName, ...)\n    -- Code to fire a server event\nend\n\nfunction ServerEventManager.UnregisterServerEvent(eventName, callback)\n    -- Code to unregister a server event\nend\n\nfunction ServerEventManager.HandleClientToServerEvent(eventName, callback)\n    -- Code to handle a client-to-server event\nend\n\nreturn ServerEventManager\n</code></pre>"},{"location":"eventmanager/#utilities-optional-child-module","title":"<code>Utilities</code> (Optional Child Module)","text":"<p>The <code>Utilities</code> module contains common utility functions that can be used by both the <code>ClientEventManager</code> and <code>ServerEventManager</code> modules.</p> <pre><code>-- Utilities Module\nlocal Utilities = {}\n\nfunction Utilities.SortByPriority(callbacks)\n    -- Code to sort a table of callbacks by priority\nend\n\nreturn Utilities\n</code></pre>"},{"location":"eventmanager/#usage-examples","title":"Usage Examples","text":""},{"location":"eventmanager/#client-script","title":"Client Script","text":"<pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nlocal function onClientHit()\n    print(\"Client hit event received\")\nend\n\nEventManager.Client.RegisterClientEvent(\"OnClientHit\", onClientHit)\n\n-- Unregister the client event\n-- EventManager.Client.UnregisterClientEvent(\"OnClientHit\", onClientHit)\n</code></pre>"},{"location":"eventmanager/#server-script","title":"Server Script","text":"<pre><code>local EventManager = require(game.ReplicatedStorage.EventManager)\n\nlocal function onAbilityUsed(player, ability)\n    print(player.Name .. \" used ability: \" .. ability)\nend\n\nEventManager.Server.RegisterServerEvent(\"OnAbilityUsed\", onAbilityUsed)\n\n-- Handle client-to-server event\nEventManager.Server.HandleClientToServerEvent(\"OnAbilityUsed\", onAbilityUsed)\n\n-- Unregister the server event\n-- EventManager.Server.UnregisterServerEvent(\"OnAbilityUsed\", onAbilityUsed)\n</code></pre>"},{"location":"eventmanager/#functions","title":"Functions","text":""},{"location":"eventmanager/#eventmanagerclient","title":"<code>EventManager.Client</code>","text":"<p>The <code>EventManager.Client</code> table provides access to the <code>ClientEventManager</code> module, allowing you to register, fire, and unregister client-specific events.</p>"},{"location":"eventmanager/#eventmanagerserver","title":"<code>EventManager.Server</code>","text":"<p>The <code>EventManager.Server</code> table provides access to the <code>ServerEventManager</code> module, allowing you to register, fire, and unregister server-specific events, as well as handle client-to-server events.</p>"},{"location":"eventmanager/#clienteventmanagerregisterclienteventeventname-callback-priority","title":"<code>ClientEventManager.RegisterClientEvent(eventName, callback, priority)</code>","text":"<p>Registers a client-specific event with the given <code>eventName</code>, <code>callback</code> function, and optional <code>priority</code> value. The <code>priority</code> value determines the order in which the callbacks are executed, with higher priority values being executed first.</p>"},{"location":"eventmanager/#clienteventmanagerfireclienteventeventname","title":"<code>ClientEventManager.FireClientEvent(eventName, ...)</code>","text":"<p>Fires a client-specific event with the given <code>eventName</code> and any additional arguments.</p>"},{"location":"eventmanager/#clienteventmanagerunregisterclienteventeventname-callback","title":"<code>ClientEventManager.UnregisterClientEvent(eventName, callback)</code>","text":"<p>Unregisters a client-specific event with the given <code>eventName</code> and <code>callback</code> function.</p>"},{"location":"eventmanager/#servereventmanagerregisterservereventeventname-callback-priority","title":"<code>ServerEventManager.RegisterServerEvent(eventName, callback, priority)</code>","text":"<p>Registers a server-specific event with the given <code>eventName</code>, <code>callback</code> function, and optional <code>priority</code> value. The <code>priority</code> value determines the order in which the callbacks are executed, with higher priority values being executed first.</p>"},{"location":"eventmanager/#servereventmanagerfireservereventeventname","title":"<code>ServerEventManager.FireServerEvent(eventName, ...)</code>","text":"<p>Fires a server-specific event with the given <code>eventName</code> and any additional arguments.</p>"},{"location":"eventmanager/#servereventmanagerunregisterservereventeventname-callback","title":"<code>ServerEventManager.UnregisterServerEvent(eventName, callback)</code>","text":"<p>Unregisters a server-specific event with the given <code>eventName</code> and <code>callback</code> function.</p>"},{"location":"eventmanager/#servereventmanagerhandleclienttoservereventeventname-callback","title":"<code>ServerEventManager.HandleClientToServerEvent(eventName, callback)</code>","text":"<p>Handles a client-to-server event with the given <code>eventName</code> and <code>callback</code> function.</p>"},{"location":"eventmanager/#utilitiessortbyprioritycallbacks","title":"<code>Utilities.SortByPriority(callbacks)</code>","text":"<p>Sorts a table of callbacks by their <code>priority</code> values in descending order.</p>"},{"location":"eventmanager/#conclusion","title":"Conclusion","text":"<p>The <code>EventManager</code> module provides a centralized and modular approach to managing events in a Roblox game. By separating client-specific and server-specific events into their respective child modules, the <code>EventManager</code> promotes code organization and maintainability. The optional <code>Utilities</code> module further enhances the functionality by providing common utility functions.</p>"}]}